Draw a sidewinder maze and solve it.
This version uses objects.
	- sidewindermaze.rem
	- Robert Sheehan
	- 27/06/21

randomize

SIZE : 10

SQUARE : a shape of {
	{-1, -1}, {-1, 1}, {1, 1}, {1, -1}
} with size (SIZE)

LEFT : 1
RIGHT : 2
UP : 3
DOWN : 4

ROWS : 28
COLUMNS : 38

the-maze : {}  ; this will contain maze cells
start : {1, 1} ; {random 39, random 29}
finish : find the middle

on standard (black) paper
	draw together
		prepare the maze grid
		make the sidewinder maze
	wait 1 sec
	draw together
		place (blue) dot in (cell at (start))
		place (orange) dot in (cell at (finish))
	solve the maze from (start) to (finish)

find the middle :
	middle-x : convert (COLUMNS ÷ 2) to integer + 1
	middle-y : convert (ROWS ÷ 2) to integer + 1
	{ middle-x, middle-y }

prepare the maze grid :
	for (column)(COLUMNS) and (row)(ROWS) on each row [append {} to (the-maze)] 
		cell : a maze cell at (row) and (column)
		append (cell) to (the-maze {row})
		draw (cell)

make the sidewinder maze :
	deal with all rows except the bottom
	deal with the bottom row
	show the maze

deal with all rows except the bottom :
	for each (row) from 1 to (ROWS - 1)
		deal with all columns in (row) except the right
		deal with the right cell in (row)

deal with all columns in (row) except the right :
	start-run : 1
	for each (column) from 1 to (COLUMNS - 1)
		if (heads)
			remove the right wall in (cell at { column, row })
		… otherwise …
			gap : choose from (start-run) to (column)
			remove the bottom wall in (cell at { gap, row })
			start-run : column + 1

deal with the right cell in (row) :
	remove the bottom wall in (cell at { COLUMNS, row })

deal with the bottom row : 
	for each (col) from 1 to (COLUMNS - 1)
		remove the right wall in (cell at { col, ROWS })

show the maze :
	for (column)(COLUMNS) and (row)(ROWS)
		cell : cell at { column, row }
		draw (cell) exits

cell at (position) :
	Return the cell object at "position".
	the-row : the-maze {position {2}}
	the-row {position {1}}

choose from (start) to (finish) :
	(random (1 + finish - start)) + start - 1

solve the maze from (start) to (finish) :
	beginning : cell at (finish) ; going backwards
	(beginning) distance : 0
	move outwards from (beginning)
	plot the solution

move outwards from (cell) :
	new-distance : (cell) distance + 1

	if all of {
		can move right from (cell),
		[not visited (right from (cell))]
		; the line above is a block because we don't want to execute it
		; unless the previous element is true
	}
		move (RIGHT) from (cell) with (new-distance)

	if all of {
		can move down from (cell),
		[not visited (down from (cell))]
	}
		move (DOWN) from (cell) with (new-distance)

	if all of {
		can move left from (cell),
		[not visited (left from (cell))]
	}
		move (LEFT) from (cell) with (new-distance)
		
	if all of {
		can move up from (cell),
		[not visited (up from (cell))]
	}
		move (UP) from (cell) with (new-distance)

move (direction) from (cell) with (new-distance) :
	new-cell : cell going (direction) from (cell)
	(new-cell) distance : new-distance
	move outwards from (new-cell)

cell going (direction) from (cell) :
	choose from
		[direction = RIGHT] do [right from (cell)]
		[direction = LEFT]  do [left from (cell)]
		[direction = UP]    do [up from (cell)]
		[direction = DOWN]  do [down from (cell)]

plot the solution :
	start-cell : cell at (start)
	go closer than ((start-cell) distance) from (start-cell)

go closer than (distance) from (cell) :
	if [cell ≠ cell at (start)]
		wait 0.25 sec
		place (green) dot in (cell)
	if [distance > 1] 
		distance : distance - 1
		choose from
			all of {
				can move right from (cell), 
				[(right from (cell)) is (distance) away]
			} do
				go closer than (distance) from (right from (cell))
			all of {
				can move left from (cell), 
				[(left from (cell)) is (distance) away]
			} do
				go closer than (distance) from (left from (cell))
			all of {
				can move down from (cell), 
				[(down from (cell)) is (distance) away]
			} do
				go closer than (distance) from (down from (cell))
			all of {
				can move up from (cell), 
				[(up from (cell)) is (distance) away]
			} do
				go closer than (distance) from (up from (cell))

==== Maze Cell Object ====

a maze cell at (the-row) and (the-col) :
	create
		row : the-row
		column : the-col
		right-open : false
		bottom-open : false
		distance : -1
		centre : {
			centre-x + ((2 × the-col) - (COLUMNS + 1)) × SIZE,
			centre-y + ((2 × the-row) - (ROWS + 1)) × SIZE
		}

		getter/setter
			distance

		remove the right wall in (me) :
			right-open : true

		remove the bottom wall in (me) :
			bottom-open : true

		draw (me) :
			draw with (red) pen
			draw (SQUARE) at (centre)

		draw (my) exits :
			draw with (black) pen
			if (right-open)
				x : centre {1} + SIZE
				y : centre {2} - SIZE
				start : { x, y }
				y : centre {2} + SIZE
				finish : { x, y }
				draw line from (start) to (finish)
			if (bottom-open)
				x : centre {1} - SIZE
				y : centre {2} + SIZE
				start : { x, y }
				x : centre {1} + SIZE
				finish : { x, y }
				draw line from (start) to (finish)

		place (colour) dot in (me) :
			fill colour (colour)
			draw circle of (SIZE ÷ 2) at (centre)

		right from (me) :
			cell at { column + 1, row }

		left from (me) :
			cell at { column - 1, row}

		up from (me) :
			cell at { column, row - 1 }

		down from (me) :
			cell at { column, row + 1 }

		can move right from (me) :
			right-open

		can move left from (me) :
			if (column = 1)
				return false
			can move right from (left from (me))

		can move down from (me) :
			bottom-open

		can move up from (me) :
			if (row = 1)
				return false
			can move down from (up from (me))

		not visited (me) :
			distance = -1

		(me) is (new-distance) away :
			distance = new-distance
